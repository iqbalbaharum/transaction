module Node declares *

data CronResult:
  hash: string
  token_key: string
  address: string
  topic: string
  token_type: string
  chain: string
  status: i64
  meta_contract_id: string
  node_url: string
  public_key: string

data CronTx:
  hash: string
  address: string
  topic: string
  token_type: string
  chain: string
  meta_contract_id: string
  timestamp: u64
  tx_block_number: u64
  tx_hash: string
  status: i64
  data: string
  error_text: string
  token_id: string
  data_key: string
  token_key: string

data DataTypeFork:
  data: string
  token_id: string
  address: string

data FdbClock:
  timestamp: i64

data FdbCronTxResult:
  success: bool
  err_msg: string
  cron_tx: CronTx

data FdbCronTxsResult:
  success: bool
  err_msg: string
  cron_txs: []CronTx

data FdbCronsResult:
  success: bool
  err_msg: string
  crons: []CronResult

data MetaContract:
  program_id: string
  public_key: string
  cid: string

data FdbMetaContractResult:
  success: bool
  err_msg: string
  meta: MetaContract

data FdbMetadataHistoryResult:
  success: bool
  err_msg: string
  metadata: string
  history: []string

data Metadata:
  hash: string
  data_key: string
  program_id: string
  alias: string
  cid: string
  version: string
  public_key: string
  loose: bool

data FdbMetadataResult:
  success: bool
  err_msg: string
  metadata: Metadata

data FdbMetadatasResult:
  success: bool
  err_msg: string
  metadatas: []Metadata

data FdbResult:
  transaction_hash: string

data Transaction:
  hash: string
  method: string
  program_id: string
  data_key: string
  from_peer_id: string
  host_id: string
  status: i64
  data: string
  public_key: string
  alias: string
  timestamp: u64
  error_text: string
  version: string

data FdbTransactionResult:
  success: bool
  err_msg: string
  transaction: Transaction

data FdbTransactionsResult:
  success: bool
  err_msg: string
  transactions: []Transaction

data FinalMetadata:
  public_key: string
  program_id: string
  alias: string
  content: string
  version: string

data MetadataOrdering:
  column: string
  sort: string

data MetadataQuery:
  column: string
  query: string
  op: string

data TransactionOrdering:
  column: string
  sort: string

data TransactionQuery:
  column: string
  query: string
  op: string

data TransactionRequest:
  data_key: string
  program_id: string
  alias: string
  public_key: string
  signature: string
  data: string
  method: string
  version: string

service Node("transaction"):
  bind_meta_contract(transaction_hash: string)  
  deserialize_fork(data: string) -> DataTypeFork
  get_active_crons() -> FdbCronsResult
  get_all_cron_txs() -> FdbCronTxsResult
  get_all_crons() -> FdbCronsResult
  get_cron_tx_by_tx_hash(tx_hash: string, address: string, chain: string, topic: string) -> FdbCronTxResult
  get_cron_tx_latest_block(address: string, chain: string, topic: string) -> u64
  get_meta_contract(token_key: string) -> FdbMetaContractResult
  get_meta_contract_by_id(meta_contract_id: string) -> FdbMetaContractResult
  get_metadata(data_key: string, program_id: string, public_key: string, alias: string, version: string) -> FdbMetadataResult
  get_metadata_with_history(data_key: string, program_id: string, public_key: string, alias: string, version: string) -> FdbMetadataHistoryResult
  get_metadatas(data_key: string, version: string) -> FdbMetadatasResult
  get_node_clock() -> FdbClock
  get_pending_transactions() -> FdbTransactionsResult
  get_success_transactions(from: i64, to: i64) -> FdbTransactionsResult
  get_transaction(hash: string) -> FdbTransactionResult
  get_transactions(query: []TransactionQuery, ordering: []TransactionOrdering, from: u32, to: u32) -> FdbTransactionsResult
  publish(data_key: string, method: string, alias: string, public_key: string, program_id: string, signature: string, data: string, version: string) -> FdbResult
  search_cron_tx(address: string, chain: string, topic: string) -> FdbCronTxsResult
  search_metadatas(query: []MetadataQuery, ordering: []MetadataOrdering, from: u32, to: u32) -> FdbMetadatasResult
  send_batch_transaction(txs: []TransactionRequest) -> []FdbResult
  send_cron_tx(hash: string, data_key: string, data: string, tx_block_number: u64, tx_hash: string, token_id: string) -> FdbCronTxResult
  set_clone(transaction_hash: string, meta_contract_id: string, on_metacontract_result: bool, data: string, final_error_msg: string)  
  set_cron(transaction_hash: string, data: string)  
  set_metadata(transaction_hash: string, meta_contract_id: string, on_metacontract_result: bool, metadatas: []FinalMetadata, final_error_msg: string)  
  set_metadata_cron(data_key: string, on_metacontract_result: bool, metadatas: []FinalMetadata)  
