import "node.aqua"
import "meta-contract.aqua"
import "fevm_json_rpc.aqua"

const NODE_SERVICE_ID = "transaction"
const CONTRACT_SERVICE_ID = "8755a3a2-7e91-4e9e-8885-53955e927ebe"
const ERC1155_ABI_URL = "https://ipfs.xfero.io/ipfs/QmSiZUtqkbEZPPFMN9ZihSbPskNxqkjBpAfB2NmwLv11N7?filename=CollaBeatNFT-abi.json"
const ERC721_ABI_URL = "https://ipfs.xfero.io/ipfs/QmWmkDbQ9KA6yLR8C8TuavLwyk2g6TfHyixG5gwTRem3Nw?filename=ERC721_0x3Zero-abi.json"

service MyOp("op"):
  array_length(results: []string) -> i64

service MyOp2("op"):
  array_length(results: []EventLogParamResult) -> i64

service MyOp3("op"):
  array_length(results: []CronResult) -> i64

data EvmLogParam:
  to: string
  token_id: string
  data: string

func validateTransaction(hash: string):
  on HOST_PEER_ID:
    Node NODE_SERVICE_ID
    tx <- Node.get_transaction(hash)

    if tx.transaction.method == "contract":
      Node.bind_meta_contract(hash)
    
    if tx.transaction.method == "metadata":
      metaContract <- Node.get_meta_contract(tx.transaction.program_id)
      if metaContract.success:
        metadatasResult <- Node.get_metadatas(tx.transaction.data_key, tx.transaction.version)
        MetaContract metaContract.meta.meta_contract_id
        metaContractResult <- MetaContract.on_execute(metaContract.meta, metadatasResult.metadatas, tx.transaction)
        Node.set_metadata(hash, metaContract.meta.meta_contract_id, metaContractResult.result, metaContractResult.metadatas, metaContractResult.error_string)

    if tx.transaction.method == "cron":
      Node.set_cron(hash, tx.transaction.data)

func getPendingTransactions_3600():
  on HOST_PEER_ID:
    Node NODE_SERVICE_ID
    result <- Node.get_pending_transactions()

    if result.success:
      for tx <- result.transactions:
        validateTransaction(tx.hash)

func new_transaction_metadata(msg: string, count: i64, version: i64) -> FdbResult:
  on HOST_PEER_ID:
    Node NODE_SERVICE_ID
    result <- Node.send_transaction("1", "11", "", "", "0xc20de1a30487ec70fc730866f297f2e2f1e411f7", "0x9239334cca0d0c7e4eb424fa4604f2c3f6d16c34b466f27ddad0a00fd4f11b581fecf9dc82f6e20e14a2977dcf80d1b72dcbb6592b46977f72afb976e34f9d7e1b", msg, "metadata", count, version)
  <- result

func new_transaction_metadata_raw(data_key: string, token_key: string, token_id: string, 
  alias: string, pub_key: string, signature: string, msg: string, nonce: i64, version: i64) -> FdbResult:
  on HOST_PEER_ID:
    Node NODE_SERVICE_ID
    result <- Node.send_transaction(data_key, token_key, token_id, alias, pub_key, signature, msg, "metadata", nonce, version)
  <- result

func new_transaction_contract(count: i64, version: i64) -> FdbResult:
  on HOST_PEER_ID:
    Node NODE_SERVICE_ID

    rst <- Node.send_transaction("", "22554c0693972d304646548b90ab240e9eb68c56ef0d1141fdf9d42f26af6c6e", "", "", "0xc20de1a30487ec70fc730866f297f2e2f1e411f7", "0x222a18b1f7a69bdb4eb32393bb5eea6cfa54fea6c9a6982696ff4b4486cfd874624113d40ba1f2e7d56401e7e70f841921c80addc59e23e0c2aca9dd0ac8261f1c", "8ea1e9bb-3113-4d04-bf02-cb92afa6d424", "contract", count, version)
  <- rst

func new_transaction_cron(token_key: string, pub_key: string, signature: string, data: string, count: i64, version: i64) -> FdbResult:
  on HOST_PEER_ID:
    Node NODE_SERVICE_ID

    rst <- Node.send_transaction("", token_key, "", "", pub_key, signature, data, "cron", count, version)
  <- rst

func pending_txs() -> FdbTransactionsResult:
  on HOST_PEER_ID:
    Node NODE_SERVICE_ID
    result <- Node.get_pending_transactions()
  <- result

func success_txs(f: i64, t: i64) -> FdbTransactionsResult:
  on HOST_PEER_ID:
    Node NODE_SERVICE_ID
    result <- Node.get_success_transactions(f, t)
  <- result

func get_txs(query: []TransactionQuery, ordering: []TransactionOrdering, from: u32, to: u32) -> FdbTransactionsResult:
  on HOST_PEER_ID:
    Node NODE_SERVICE_ID
    result <- Node.get_transactions(query, ordering, from, to)
  <- result

func processCron():
  on HOST_PEER_ID:
    Node NODE_SERVICE_ID
    results <- Node.get_active_crons()

    evm_logs: *[]EventLogParamResult
    meta_contract_result: *MetaContractResult
    cron_datas: *CronResult

    datas2: *EventLogParamResult

    if results.success:  
      cron_length <- MyOp3.array_length(results.crons)

      for result <- results.crons par:
        cron_datas <<- result
        from_block = Node.get_cron_tx_latest_block(result.address, result.chain, result.topic)
        from_block_hex = FevmJsonRpc.decimal_to_hex(0)
        
        if result.token_type == "erc1155":
          evm_logs <- FevmJsonRpc.eth_get_logs(result.node_url, ERC1155_ABI_URL, from_block_hex, "latest", result.address, [result.topic])
        if result.token_type == "erc721":
          evm_logs <- FevmJsonRpc.eth_get_logs(result.node_url, ERC721_ABI_URL, from_block_hex, "latest", result.address, [result.topic])

        for log <- evm_logs:
          datas: *EventLogParamResult

          n <- MyOp2.array_length(log)
          for llog <- log par:
            log_data = Node.deserialize_fork(llog.data)
            if log_data.data != "":
              if log_data.data != "00":
                forks = FevmJsonRpc.decode_abi(["string", "bytes"], log_data.data)

                -- parsing Minted event log (data_key, data)
                if MyOp.array_length(forks) == 2:
                  metaContract <- Node.get_meta_contract_by_id(result.meta_contract_id)
                  MetaContract metaContract.meta.meta_contract_id
                  meta_result <- MetaContract.on_mint(metaContract.meta, forks[0], log_data.token_id, forks[1])

                  if meta_result.result:
                    Node.set_metadata_cron(forks[0], meta_result.result, meta_result.metadatas)
                    Node.send_cron_tx(result.hash, forks[0], llog.data, llog.block_number, llog.transaction_hash, log_data.token_id)
              datas <<- llog
              datas2 <<- llog
          join datas[n-1]
      join cron_datas[cron_length-1]

func send_cron_tx(hash: string) -> FdbCronTxResult:
  
  on HOST_PEER_ID:
    Node NODE_SERVICE_ID

    result <- Node.send_cron_tx(hash, "123", "data", 0, "0x0", "1")
  <- result

func get_cron_tx_latest_block() -> u64:
  on HOST_PEER_ID:
    Node NODE_SERVICE_ID
    result <- Node.get_cron_tx_latest_block("0xf44DB7bB5719C79b7483028ea62182DB8E624B10", "80001", "0x957f358702a4cd1c866fb29aefe080a9a56303adf02d47a081a56707d2d30033")
  <- result

func get_all_cron_txs() -> FdbCronTxsResult:
  on HOST_PEER_ID:
    Node NODE_SERVICE_ID
    result <- Node.get_all_cron_txs()
  <- result

func search_metadatas(query: []MetadataQuery, ordering: []MetadataOrdering, from: u32, to:u32) -> FdbMetadatasResult:
  on HOST_PEER_ID:
    Node NODE_SERVICE_ID
    result <- Node.search_metadatas(query, ordering, from, to)
  <- result   

func send_batch_txs(txs: []TransactionRequest) -> []FdbResult:
  on HOST_PEER_ID:
    Node NODE_SERVICE_ID
    results <- Node.send_batch_transaction(txs)
  <- results

func get_metadatas(data_key: string) -> FdbMetadatasResult:
  on HOST_PEER_ID:
    Node NODE_SERVICE_ID
    result <- Node.get_metadatas(data_key)
  <- result

func get_crons() -> FdbCronsResult:
  on HOST_PEER_ID:
    Node NODE_SERVICE_ID
    results <- Node.get_active_crons()
  <- results